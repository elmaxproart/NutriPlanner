// src/constants/prompts.ts
import { HistoriqueRepas, MembreFamille, Recette, Ingredient, Menu, Store } from '../constants/entities';
import { calculateAge } from '../utils/helpers';

const getCurrentDate = () => new Date().toISOString().split('T')[0];

export enum PromptType {
  WEEKLY_MENU = 'weekly_menu',
  SHOPPING_LIST = 'shopping_list',
  RECIPE_NUTRITION_ANALYSIS = 'recipe_nutrition_analysis',
  RECIPE_SUGGESTION = 'recipe_suggestion',
  INGREDIENT_AVAILABILITY = 'ingredient_availability',
  NUTRITIONAL_INFO = 'nutritional_info',
  TROUBLESHOOT_PROBLEM = 'troubleshoot_problem',
  CREATIVE_IDEAS = 'creative_ideas',
  RECIPE_PERSONALIZED = 'recipe_personalized',
  QUICK_RECIPE = 'quick_recipe',
  BUDGET_PLANNING = 'budget_planning',
  STORE_SUGGESTION = 'store_suggestion',
  MEAL_ANALYSIS = 'meal_analysis',
  KIDS_RECIPE = 'kids_recipe',
  SPECIAL_OCCASION_MENU = 'special_occasion_menu',
  INVENTORY_OPTIMIZATION = 'inventory_optimization',
  INGREDIENT_BASED_RECIPE = 'ingredient_based_recipe',
  BUDGET_MENU = 'budget_menu',
  RECIPE_COMPATIBILITY = 'recipe_compatibility',
  SPECIFIC_DIET_RECIPE = 'specific_diet_recipe',
  BALANCED_DAILY_MENU = 'balanced_daily_menu',
  RECIPE_FROM_IMAGE = 'recipe_from_image',
  LEFTOVER_RECIPE = 'leftover_recipe',
  GUEST_RECIPE = 'guest_recipe',
  FOOD_TREND_ANALYSIS = 'food_trend_analysis',
}

export interface PromptTemplate {
  id: PromptType;
  name: string;
  description: string;
  generate: (params: any) => string;
}

export const prompts: PromptTemplate[] = [
  {
    id: PromptType.RECIPE_PERSONALIZED,
    name: 'Recette Personnalis√©e pour un Membre',
    description: 'G√©n√®re une recette adapt√©e aux pr√©f√©rences, allergies et besoins nutritionnels d‚Äôun membre de la famille.',
    generate: (params: { member: MembreFamille }) => {
      const { member } = params;
      return JSON.stringify({
        prompt: `üçΩÔ∏è **G√©n√©ration de Recette Personnalis√©e pour un Membre de la Famille** üçΩÔ∏è\n\n
          Vous √™tes un assistant culinaire IA avanc√©, charg√© de cr√©er une recette sur mesure pour un membre de la famille, en respectant ses pr√©f√©rences, restrictions et besoins nutritionnels. La r√©ponse doit √™tre au format JSON strict, conforme aux interfaces TypeScript \`Ingredient\` et \`Recette\`. La recette doit √™tre d√©licieuse, r√©alisable en moins de 60 minutes, et optimis√©e pour les go√ªts et la sant√© du membre. Si des ingr√©dients manquent dans l'inventaire, proposez un plan d'achat avec des fournisseurs. Fournissez une analyse d√©taill√©e pour garantir l'ad√©quation de la recette.\n\n
          üåü **Profil du Membre de la Famille** üåü\n
          - **Nom**: ${member.prenom ? member.prenom + ' ' : ''}${member.nom}\n
          - **√Çge**: ${calculateAge(member.dateNaissance) || 'Non sp√©cifi√©'} ans\n
          - **Genre**: ${member.genre}\n
          - **R√¥le**: ${member.role}\n
          - **Pr√©f√©rences Alimentaires**: ${member.preferencesAlimentaires.length > 0 ? member.preferencesAlimentaires.join(', ') : 'Aucune'}\n
          - **Allergies**: ${member.allergies.length > 0 ? member.allergies.join(', ') : 'Aucune'}\n
          - **Restrictions M√©dicales**: ${member.restrictionsMedicales.length > 0 ? member.restrictionsMedicales.join(', ') : 'Aucune'}\n
          - **Cuisines Pr√©f√©r√©es**: ${member.aiPreferences.cuisinesPreferees.length > 0 ? member.aiPreferences.cuisinesPreferees.join(', ') : 'Non sp√©cifi√©es'}\n
          - **Niveau d'√âpices Pr√©f√©r√©**: ${member.aiPreferences.niveauEpices}/5\n
          - **Apport Calorique Cible**: ${member.aiPreferences.apportCaloriqueCible} kcal/jour\n
          - **Repas Favoris**: ${member.repasFavoris?.length ? member.repasFavoris.join(', ') : 'Aucun'}\n
          - **Conditions de Sant√©**: ${member.historiqueSante?.length ? member.historiqueSante.map(h => `${h.condition} (${h.dateDiagnostic})`).join(', ') : 'Aucune'}\n
          - **Contact d'Urgence**: ${member.contactUrgence.nom} (${member.contactUrgence.telephone})\n
          - **Niveau d'Acc√®s**: ${member.niveauAcces}\n\n
          üìã **Interfaces TypeScript** üìã\n
          interface Ingredient {
            id: string;
            nom: string;
            quantite: number;
            unite: 'kg' | 'g' | 'l' | 'ml' | 'unit√©' | 'pinc√©e' | 'cuill√®re √† soupe' | 'cuill√®re √† caf√©';
            categorie?: 'l√©gume' | 'viande' | 'poisson' | 'fruit' | 'c√©r√©ale' | 'produit laitier' | '√©pice' | 'autre';
            prixUnitaire?: number;
            description?: string;
            perissable: boolean;
            datePeremption?: string;
            dateAchat?: string;
            stockActuel: number;
            marque?: string;
            fournisseur?: { storeId: string; prixUnitaire: number; dernierAchat?: string }[];
            valeurNutritionnelle?: { calories: number; proteines: number; glucides: number; lipides: number; fibres?: number };
          }
          interface Recette {
            id: string;
            nom: string;
            ingredients: Ingredient[];
            instructions: string[];
            tempsPreparation: number;
            tempsCuisson?: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson' | 'petit-d√©jeuner';
            difficulte: 'facile' | 'moyen' | 'difficile';
            imageUrl?: string;
            etapesPreparation: { texte: string; ordre: number }[];
            tags?: string[];
            coutEstime?: number;
            variantes?: { nom: string; modifications: string }[];
            tutorielVideo?: string;
            commentaires?: { userId: string; texte: string; date: string }[];
            aiAnalysis?: { caloriesTotales: number; niveauEpices: number; adequationMembres: { [membreId: string]: 'adapt√©' | 'non adapt√©' | 'modifi√©' } };
          }
          üîß **Instructions pour l'IA** üîß\n
          1. **Validation Rigoureuse**:
             - Exclure tout ingr√©dient correspondant aux allergies ou restrictions m√©dicales (ex. √©viter le lactose si intol√©rance).
             - Si une pr√©f√©rence alimentaire (ex. v√©gane) est pr√©sente, substituer les ingr√©dients incompatibles (ex. lait d‚Äôamande pour lait de vache).
             - Maintenir l‚Äôapport calorique total dans ¬±10% de l‚Äôobjectif (${member.aiPreferences.apportCaloriqueCible} kcal).
             - Ajuster le niveau d‚Äô√©pices pour correspondre √† ${member.aiPreferences.niveauEpices}/5.
          2. **Ingr√©dients**:
             - Lister tous les ingr√©dients n√©cessaires avec des valeurs r√©alistes pour \`quantite\`, \`unite\`, \`prixUnitaire\`, \`perissable\`, et \`valeurNutritionnelle\`.
             - Supposer un inventaire partiel (50% des ingr√©dients disponibles) et indiquer \`stockActuel\`.
             - Pour les ingr√©dients manquants, fournir un \`fournisseur\` avec \`storeId\` g√©n√©rique (ex. 'magasin1') et \`prixUnitaire\` estim√©.
             - Pour les ingr√©dients p√©rissables, inclure une \`datePeremption\` dans les 7 √† 14 jours √† partir du ${getCurrentDate()}.
          3. **Recette**:
             - Cr√©er un nom de recette attrayant refl√©tant les cuisines pr√©f√©r√©es (ex. 'Curry V√©g√©tarien Tha√Ø' pour une pr√©f√©rence asiatique).
             - Fournir des \`instructions\` claires (max. 10 √©tapes) et des \`etapesPreparation\` num√©rot√©es.
             - Inclure des \`tags\` pertinents (ex. 'rapide', 'sain', 'familial').
             - Calculer le \`coutEstime\` en multipliant \`quantite\` par \`prixUnitaire\`.
             - Proposer une \`variante\` (ex. version sans gluten ou faible en sel).
             - Fournir une \`imageUrl\` fictive (ex. 'https://example.com/recipe.jpg').
             - Inclure un \`tutorielVideo\` fictif (ex. 'https://youtube.com/video123').
             - Ajouter un \`commentaire\` fictif d‚Äôun utilisateur (ex. 'Super recette, facile √† faire !').
          4. **Analyse AI**:
             - Calculer \`caloriesTotales\` en sommant les calories des ingr√©dients, ajust√©es aux quantit√©s.
             - V√©rifier \`niveauEpices\` par rapport aux ingr√©dients (ex. curry = niveau 3).
             - D√©terminer \`adequationMembres\` pour ${member.id} (ex. 'adapt√©' si conforme, 'modifi√©' si substitutions).
          5. **Gestion d'Inventaire**:
             - Identifier les ingr√©dients avec \`stockActuel\` insuffisant.
             - Proposer un tableau \`inventaireAjouts\` avec les ingr√©dients √† acheter, incluant \`fournisseur\` et \`quantite\`.
          6. **Sortie JSON**:
             - Retourner un objet avec deux cl√©s:
               - \`recette\`: Objet conforme √† l‚Äôinterface \`Recette\`.
               - \`inventaireAjouts\`: Tableau d‚Äôobjets \`Ingredient\` √† ajouter.
             - Assurer un JSON valide, sans texte ou commentaires externes.
          üìä **Exemple de R√©ponse Attendue** üìä\n
          {
            "recette": {
              "id": "recette123",
              "nom": "Salade Ni√ßoise V√©g√©tarienne",
              "ingredients": [
                {
                  "id": "ing1",
                  "nom": "Tomates",
                  "quantite": 0.4,
                  "unite": "kg",
                  "categorie": "l√©gume",
                  "prixUnitaire": 3.0,
                  "perissable": true,
                  "datePeremption": "${new Date(new Date(getCurrentDate()).setDate(new Date(getCurrentDate()).getDate() + 7)).toISOString().split('T')[0]}",
                  "stockActuel": 0.1,
                  "valeurNutritionnelle": { "calories": 18, "proteines": 0.9, "glucides": 3.9, "lipides": 0.2 }
                }
              ],
              "instructions": ["Couper les tomates", "Assembler la salade"],
              "etapesPreparation": [{ "texte": "Couper les tomates en quartiers", "ordre": 1 }],
              "tempsPreparation": 20,
              "portions": 2,
              "categorie": "entr√©e",
              "difficulte": "facile",
              "imageUrl": "https://example.com/salade.jpg",
              "tags": ["sain", "rapide", "v√©g√©tarien"],
              "coutEstime": 7.5,
              "variantes": [{ "nom": "Sans ≈ìuf", "modifications": "Omettre les ≈ìufs durs" }],
              "tutorielVideo": "https://youtube.com/video456",
              "commentaires": [{ "userId": "user123", "texte": "D√©licieux et frais !", "date": "${getCurrentDate()}T10:00:00Z" }],
              "aiAnalysis": { "caloriesTotales": 180, "niveauEpices": 1, "adequationMembres": { "${member.id}": "adapt√©" } }
            },
            "inventaireAjouts": [
              {
                "id": "ing1",
                "nom": "Tomates",
                "quantite": 0.3,
                "unite": "kg",
                "fournisseur": [{ "storeId": "magasin1", "prixUnitaire": 3.0 }]
              }
            ]
          }\n
          ‚ö†Ô∏è **Contraintes Additionnelles** ‚ö†Ô∏è\n
          - Utiliser exclusivement le fran√ßais pour tous les textes (noms, instructions, commentaires).
          - Respecter le format de date AAAA-MM-DD pour \`datePeremption\` et \`dateAchat\`.
          - Fournir des valeurs nutritionnelles r√©alistes bas√©es sur des standards (ex. tomates: 18 kcal/100g).
          - √âviter toute incoh√©rence, comme inclure un ingr√©dient allerg√®ne.
          - Si les cuisines pr√©f√©r√©es ne sont pas sp√©cifi√©es, choisir une cuisine universelle (ex. m√©diterran√©enne).
          - G√©n√©rer une recette adapt√©e √† l‚Äô√¢ge et aux conditions de sant√© (ex. faible en sucre pour diab√®te).
          üéâ **Objectif**: Cr√©er une exp√©rience culinaire d√©licieuse et personnalis√©e pour ${member.prenom || member.nom} ! üéâ`,
      });
    },
  },
  {
    id: PromptType.WEEKLY_MENU,
    name: 'Menu Hebdomadaire pour la Famille',
    description: 'G√©n√®re un menu hebdomadaire pour tous les membres de la famille, en respectant leurs pr√©f√©rences et restrictions.',
    generate: (params: { members: MembreFamille[]; dateStart: string }) => {
      const { members, dateStart } = params;
      return JSON.stringify({
        prompt: `üìÖ **G√©n√©ration d‚Äôun Menu Hebdomadaire pour la Famille** üìÖ\n\n
          Vous √™tes un assistant culinaire IA charg√© de cr√©er un menu pour une semaine compl√®te (7 jours √† partir du ${dateStart}) pour une famille. Le menu doit inclure des repas pour le petit-d√©jeuner, le d√©jeuner, le d√Æner et une collation quotidienne, en respectant les pr√©f√©rences alimentaires, allergies et restrictions m√©dicales de chaque membre. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Menu\`.\n\n
          üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Membres de la Famille** üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n
          ${members
            .map(
              (m) => `
          - **${m.prenom} ${m.nom}**:\n
            - √Çge: ${calculateAge(m.dateNaissance) || 'Non sp√©cifi√©'} ans\n
            - Pr√©f√©rences: ${m.preferencesAlimentaires.join(', ') || 'Aucune'}\n
            - Allergies: ${m.allergies.join(', ') || 'Aucune'}\n
            - Restrictions: ${m.restrictionsMedicales.join(', ') || 'Aucune'}\n
            - Cuisines pr√©f√©r√©es: ${m.aiPreferences.cuisinesPreferees.join(', ') || 'Non sp√©cifi√©es'}\n
            - Niveau d'√©pices: ${m.aiPreferences.niveauEpices}/5\n
            - Calories cible: ${m.aiPreferences.apportCaloriqueCible} kcal/jour\n`
            )
            .join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          interface Menu {
            id: string;
            date: string;
            typeRepas: 'petit-d√©jeuner' | 'd√©jeuner' | 'd√Æner' | 'collation';
            recettes: { id: string; nom: string; ingredients: { nom: string; quantite: number; unite: string }[] }[];
            coutTotalEstime?: number;
            statut: 'planifi√©' | 'termin√©' | 'annul√©';
            aiSuggestions?: { recettesAlternatives: string[]; ingredientsManquants: { nom: string; quantite: number; unite: string }[] };
          }\n
          üîß **Instructions** üîß\n
          - G√©n√©rer 28 menus (4 repas/jour √ó 7 jours).\n
          - Assurer que chaque repas est adapt√© √† tous les membres (ex. substituer les allerg√®nes).\n
          - Inclure des recettes vari√©es bas√©es sur les cuisines pr√©f√©r√©es.\n
          - Fournir une liste d‚Äôingr√©dients manquants pour la semaine.\n
          - Calculer le \`coutTotalEstime\` pour chaque menu.\n
          - Retourner un objet avec deux cl√©s: \`menus\` (tableau de \`Menu\`) et \`ingredientsManquants\` (tableau d'ingr√©dients).\n
          üìä **Exemple de R√©ponse** üìä\n
          {
            "menus": [{
              "id": "menu1",
              "date": "${dateStart}",
              "typeRepas": "petit-d√©jeuner",
              "recettes": [{ "id": "rec1", "nom": "Smoothie aux fruits", "ingredients": [{ "nom": "Banane", "quantite": 2, "unite": "unit√©" }] }],
              "coutTotalEstime": 5.0,
              "statut": "planifi√©"
            }],
            "ingredientsManquants": [{ "nom": "Banane", "quantite": 14, "unite": "unit√©" }]
          }\n`,
      });
    },
  },
  {
    id: PromptType.SHOPPING_LIST,
    name: 'Liste de Courses Optimis√©e',
    description: 'G√©n√®re une liste de courses bas√©e sur un menu, avec suggestions de magasins et promotions.',
    generate: (params: { menu: Menu; stores: Store[] }) => {
      const { menu, stores } = params;
      return JSON.stringify({
        prompt: `üõí **G√©n√©ration d‚Äôune Liste de Courses Optimis√©e** üõí\n\n
          Vous √™tes un assistant IA charg√© de cr√©er une liste de courses pour un menu donn√©, en tenant compte des stocks actuels et des promotions disponibles dans les magasins. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`ListeCourses\`.\n\n
          üìã **Menu** üìã\n
          - Date: ${menu.date}\n
          - Type: ${menu.typeRepas}\n
          - Recettes: ${menu.recettes.map((r) => r.nom).join(', ')}\n
          - Ingr√©dients requis: ${menu.recettes
            .flatMap((r) => r.ingredients.map((i) => `${i.nom} (${i.quantite} ${i.unite})`))
            .join(', ')}\n\n
          üè¨ **Magasins Disponibles** üè¨\n
          ${stores
            .map(
              (s) => `
          - ${s.nom} (${s.categorie}):\n
            - Articles: ${s.articles.map((a) => `${a.nom} (${a.prixUnitaire} ‚Ç¨/${a.unite})`).join(', ')}\n
            - Promotions: ${s.promotions?.map((p) => `${p.articleId} (-${p.reduction}%)`).join(', ') || 'Aucune'}\n`
            )
            .join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          interface ListeCourses {
            id: string;
            nom: string;
            items: { ingredientId: string; nom: string; quantite: number; unite: string; achete: boolean; magasinSugger√©?: string }[];
            budgetEstime?: number;
            statut: 'en cours' | 'termin√©e' | 'archiv√©e';
          }\n
          üîß **Instructions** üîß\n
          - Lister les ingr√©dients manquants pour le menu.\n
          - Sugg√©rer des magasins en fonction des prix et des promotions.\n
          - Calculer le \`budgetEstime\`.\n
          - Marquer tous les articles comme non-achet√©s (\`achete: false\`).\n
          - Retourner un objet conforme √† l‚Äôinterface \`ListeCourses\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "liste1",
            "nom": "Courses pour d√Æner",
            "items": [{ "ingredientId": "ing1", "nom": "Tomates", "quantite": 2, "unite": "kg", "achete": false, "magasinSugger√©": "Supermarch√© X" }],
            "budgetEstime": 15.0,
            "statut": "en cours"
          }\n`,
      });
    },
  },
  {
    id: PromptType.RECIPE_NUTRITION_ANALYSIS,
    name: 'Analyse Nutritionnelle d‚Äôune Recette',
    description: 'Analyse nutritionnelle et ad√©quation d‚Äôune recette pour une famille.',
    generate: (params: { recipe: Recette }) => {
      const { recipe } = params;
      return JSON.stringify({
        prompt: `üîç **Analyse Nutritionnelle d‚Äôune Recette** üîç\n\n
          Vous √™tes un expert en nutrition IA charg√© d‚Äôanalyser une recette pour fournir des informations d√©taill√©es sur ses valeurs nutritionnelles et son ad√©quation aux membres de la famille. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`RecipeAnalysisContent\`.\n\n
          üç¥ **Recette** üç¥\n
          - Nom: ${recipe.nom}\n
          - Ingr√©dients: ${recipe.ingredients.map((i) => `${i.nom} (${i.quantite} ${i.unite})`).join(', ')}\n
          - Portions: ${recipe.portions}\n\n
          üìã **Interface TypeScript** üìã\n
          interface RecipeAnalysisContent {
            type: 'recipe_analysis';
            recipeId: string;
            analysis: { calories: number; nutrients: { name: string; value: number; unit: string }[]; dietaryFit: string };
          }\n
          üîß **Instructions** üîß\n
          - Calculer les calories totales et par portion.\n
          - Lister les nutriments principaux (prot√©ines, glucides, lipides, fibres).\n
          - Indiquer si la recette convient aux r√©gimes sp√©cifiques (ex. v√©gane, sans gluten).\n
          - Retourner un objet conforme √† l‚Äôinterface \`RecipeAnalysisContent\`.\n
          üìä **Exemple** üìä\n
          {
            "type": "recipe_analysis",
            "recipeId": "${recipe.id}",
            "analysis": {
              "calories": 500,
              "nutrients": [{ "name": "Prot√©ines", "value": 20, "unit": "g" }],
              "dietaryFit": "Convient aux v√©g√©tariens"
            }
          }\n`,
      });
    },
  },
  {
    id: PromptType.RECIPE_SUGGESTION,
    name: 'Suggestion de Recette',
    description: 'Sugg√®re des recettes bas√©es sur les ingr√©dients et pr√©f√©rences.',
    generate: (params: { ingredients: Ingredient[]; preferences: any }) => {
      const { ingredients, preferences } = params;
      return JSON.stringify({
        prompt: `üç¥ **Suggestion de Recette** üç¥\n\n
          Proposez 3 recettes bas√©es sur les ingr√©dients et pr√©f√©rences suivantes :
          Ingr√©dients : ${ingredients.map((i) => `${i.nom} (${i.quantite} ${i.unite})`).join(', ')}
          Pr√©f√©rences : Niveau d'√©pices ${preferences.niveauEpices}, Cuisines ${preferences.cuisinesPreferees.join(
            ', '
          )}${preferences.mealType ? `, Type de repas ${preferences.mealType}` : ''}.
          R√©pondez en JSON avec un tableau d'objets Recette conformes √† l'interface TypeScript \`Recette\`.\n\n
          üìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson' | 'petit-d√©jeuner';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Assurer que les recettes utilisent principalement les ingr√©dients fournis.\n
          - Respecter les pr√©f√©rences alimentaires et le niveau d‚Äô√©pices.\n
          - Retourner un tableau de 3 objets \`Recette\`.\n
          üìä **Exemple** üìä\n
          [{
            "id": "rec1",
            "nom": "Salade de quinoa",
            "ingredients": [{ "nom": "Quinoa", "quantite": 200, "unite": "g" }],
            "instructions": ["Cuire le quinoa", "M√©langer avec les l√©gumes"],
            "tempsPreparation": 20,
            "portions": 4,
            "categorie": "plat principal",
            "difficulte": "facile"
          }]\n`,
      });
    },
  },
  {
    id: PromptType.QUICK_RECIPE,
    name: 'Recette Rapide',
    description: 'G√©n√®re une recette r√©alisable en moins de 30 minutes, adapt√©e √† un membre.',
    generate: (params: { member: MembreFamille }) => {
      const { member } = params;
      return JSON.stringify({
        prompt: `‚è© **G√©n√©ration d‚Äôune Recette Rapide** ‚è©\n\n
          G√©n√®re une recette r√©alisable en moins de 30 minutes, adapt√©e aux pr√©f√©rences et restrictions d‚Äôun membre de la famille. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          üåü **Membre** üåü\n
          - Nom: ${member.prenom} ${member.nom}\n
          - Pr√©f√©rences: ${member.preferencesAlimentaires.join(', ') || 'Aucune'}\n
          - Allergies: ${member.allergies.join(', ') || 'Aucune'}\n
          üìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Temps total (pr√©paration + cuisson) < 30 minutes.\n
          - Utiliser des ingr√©dients simples et courants.\n
          - Respecter les pr√©f√©rences et restrictions du membre.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Recette\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "rec1",
            "nom": "Omelette aux l√©gumes",
            "ingredients": [{ "nom": "≈íufs", "quantite": 4, "unite": "unit√©" }],
            "instructions": ["Battre les ≈ìufs", "Cuire 5 min"],
            "tempsPreparation": 10,
            "portions": 2,
            "categorie": "plat principal",
            "difficulte": "facile"
          }\n`,
      });
    },
  },
  {
    id: PromptType.BUDGET_PLANNING,
    name: 'Planification de Budget Alimentaire',
    description: 'G√©n√®re un plan budg√©taire mensuel pour les d√©penses alimentaires.',
    generate: (params: { budgetLimit: number; month: string }) => {
      const { budgetLimit, month } = params;
      return JSON.stringify({
        prompt: `üí∞ **Planification de Budget Alimentaire Mensuel** üí∞\n\n
          Vous √™tes un assistant IA charg√© de cr√©er un plan budg√©taire pour les d√©penses alimentaires d‚Äôun mois (${month}). La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Budget\`.\n\n
          üìã **D√©tails** üìÖ\n
          - Plafond: ${budgetLimit} EUR\n
          - Mois: ${month}\n
          üìã **Interface TypeScript** üìã\n
          interface Budget {
            mois: string;
            plafond: number;
            depenses: [{ date: string; montant: number; description: string; categorie: string }];
          }\n
          üîß **Instructions** üîß\n
          - Proposer une r√©partition hebdomadaire du budget.\n
          - Inclure des cat√©gories (nourriture, hygi√®ne, etc.).\n
          - Retourner un objet conforme √† l‚Äôinterface \`Budget\`.\n
          üìä **Exemple** üìä\n
          {
            "mois": "${month}",
            "plafond": ${budgetLimit},
            "depenses": [{ "date": "${month}-01", "montant": 100, "description": "Courses hebdo", "categorie": "nourriture" }]
          }\n`,
      });
    },
  },
  {
    id: PromptType.STORE_SUGGESTION,
    name: 'Suggestion de Magasin',
    description: 'Sugg√®re le meilleur magasin pour acheter un ingr√©dient sp√©cifique.',
    generate: (params: { ingredient: Ingredient; stores: Store[] }) => {
      const { ingredient, stores } = params;
      return JSON.stringify({
        prompt: `üè¨ **Suggestion de Magasin pour un Ingr√©dient** üè¨\n\n
          Vous √™tes un assistant IA charg√© de sugg√©rer le meilleur magasin pour acheter un ingr√©dient sp√©cifique, en tenant compte du prix, de la disponibilit√© et des promotions. La r√©ponse doit √™tre au format JSON strict.\n\n
          ü•ï **Ingr√©dient** ü•ï\n
          - Nom: ${ingredient.nom}\n
          - Quantit√©: ${ingredient.quantite} ${ingredient.unite}\n
          üè™ **Magasins** üè™\n
          ${stores
            .map(
              (s) =>
                `- ${s.nom}: ${
                  s.articles.find((a) => a.nom === ingredient.nom)?.prixUnitaire || 'Non disponible'
                } ‚Ç¨/${ingredient.unite}`
            )
            .join('\n')}
          \nüìã **Sortie** üìã\n
          {
            "ingredientId": string,
            "storeId": string,
            "storeName": string,
            "prixUnitaire": number,
            "promotion"?: { reduction: number; dateFin: string }
          }\n
          üîß **Instructions** üîß\n
          - Choisir le magasin avec le prix le plus bas ou une promotion active.\n
          - Retourner un objet avec les d√©tails du magasin sugg√©r√©.\n
          üìä **Exemple** üìä\n
          {
            "ingredientId": "${ingredient.id}",
            "storeId": "store1",
            "storeName": "Supermarch√© X",
            "prixUnitaire": 2.5,
            "promotion": { "reduction": 10, "dateFin": "${getCurrentDate()}" }
          }\n`,
      });
    },
  },
  {
    id: PromptType.MEAL_ANALYSIS,
    name: 'Analyse de Repas Consomm√©',
    description: 'Analyse un repas consomm√© pour √©valuer sa valeur nutritionnelle et son impact.',
    generate: (params: { historiqueRepas: HistoriqueRepas; member: MembreFamille }) => {
      const { historiqueRepas, member } = params;
      return JSON.stringify({
        prompt: `üçΩÔ∏è **Analyse d‚Äôun Repas Consomm√©** üçΩÔ∏è\n\n
          Vous √™tes un expert en nutrition IA charg√© d‚Äôanalyser un repas consomm√© par un membre de la famille pour √©valuer ses valeurs nutritionnelles et son ad√©quation avec ses besoins. La r√©ponse doit √™tre au format JSON strict.\n\n
          üìã **Repas** üìã\n
          - Date: ${historiqueRepas.date}\n
          - Type: ${historiqueRepas.typeRepas}\n
          - Notes: ${historiqueRepas.notes || 'Aucune'}\n
          üë§ **Membre** üë§\n
          - Nom: ${member.prenom} ${member.nom}\n
          - Calories cible: ${member.aiPreferences.apportCaloriqueCible} kcal\n
          üìã **Sortie** üìã\n
          {
            "calories": number,
            "nutrients": [{ name: string; value: number; unit: string }],
            "adequation": string
          }\n
          üîß **Instructions** üîß\n
          - Estimer les calories et nutriments bas√©s sur le type de repas.\n
          - Comparer avec les besoins du membre.\n
          - Retourner un objet avec les d√©tails nutritionnels.\n
          üìä **Exemple** üìä\n
          {
            "calories": 600,
            "nutrients": [{ "name": "Prot√©ines", "value": 25, "unit": "g" }],
            "adequation": "Adapt√© aux besoins caloriques"
          }\n`,
      });
    },
  },
  {
    id: PromptType.KIDS_RECIPE,
    name: 'Recette pour Enfants',
    description: 'G√©n√®re une recette amusante et saine adapt√©e aux enfants.',
    generate: (params: { member: MembreFamille }) => {
      const { member } = params;
      return JSON.stringify({
        prompt: `üëß **Recette pour Enfants** üëß\n\n
          G√©n√®re une recette amusante, saine et adapt√©e aux enfants, en respectant les pr√©f√©rences et restrictions d‚Äôun membre de la famille. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          üåü **Membre** üåü\n
          - Nom: ${member.prenom} ${member.nom}\n
          - √Çge: ${calculateAge(member.dateNaissance) || 'Non sp√©cifi√©'} ans\n
          - Pr√©f√©rences: ${member.preferencesAlimentaires.join(', ') || 'Aucune'}\n
          üìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Cr√©er une recette visuellement attrayante pour les enfants.\n
          - Utiliser des ingr√©dients sains et simples.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Recette\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "rec1",
            "nom": "Pizza arc-en-ciel",
            "ingredients": [{ "nom": "Poivrons", "quantite": 2, "unite": "unit√©" }],
            "instructions": ["Couper les l√©gumes", "Assembler la pizza"],
            "tempsPreparation": 15,
            "portions": 4,
            "categorie": "plat principal",
            "difficulte": "facile"
          }\n`,
      });
    },
  },
  {
    id: PromptType.SPECIAL_OCCASION_MENU,
    name: 'Menu pour Occasion Sp√©ciale',
    description: 'G√©n√®re un menu pour une occasion sp√©ciale (ex. anniversaire, f√™te).',
    generate: (params: { members: MembreFamille[]; occasion: string; date: string }) => {
      const { members, occasion, date } = params;
      return JSON.stringify({
        prompt: `üéâ **Menu pour Occasion Sp√©ciale** üéâ\n\n
          G√©n√®re un menu pour une occasion sp√©ciale (${occasion}) √† la date ${date}, adapt√© aux pr√©f√©rences de la famille. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Menu\`.\n\n
          üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Membres** üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n
          ${members.map((m) => `- ${m.prenom} ${m.nom}: ${m.preferencesAlimentaires.join(', ') || 'Aucune'}`).join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          interface Menu {
            id: string;
            date: string;
            typeRepas: 'd√©jeuner' | 'd√Æner';
            recettes: { id: string; nom: string; ingredients: { nom: string; quantite: number; unite: string }[] }[];
            coutTotalEstime?: number;
            statut: 'planifi√©' | 'termin√©' | 'annul√©';
          }\n
          üîß **Instructions** üîß\n
          - Inclure entr√©e, plat principal, dessert.\n
          - Proposer des recettes festives.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Menu\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "menu1",
            "date": "${date}",
            "typeRepas": "d√Æner",
            "recettes": [{ "id": "rec1", "nom": "Foie gras", "ingredients": [] }],
            "coutTotalEstime": 50,
            "statut": "planifi√©"
          }\n`,
      });
    },
  },
  {
    id: PromptType.INVENTORY_OPTIMIZATION,
    name: 'Optimisation de l‚ÄôInventaire',
    description: 'Sugg√®re des recettes utilisant les ingr√©dients proches de la p√©remption.',
    generate: (params: { ingredients: Ingredient[] }) => {
      const { ingredients } = params;
      return JSON.stringify({
        prompt: `üì¶ **Optimisation de l‚ÄôInventaire** üì¶\n\n
          G√©n√®re des recettes utilisant des ingr√©dients proches de leur date de p√©remption pour minimiser le gaspillage. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          ü•ï **Ingr√©dients** ü•ï\n
          ${ingredients
            .filter((i) => i.perissable && i.datePeremption)
            .map((i) => `- ${i.nom}: ${i.quantite} ${i.unite}, p√©remption ${i.datePeremption}`)
            .join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Prioriser les ingr√©dients expirant dans les 3 jours.\n
          - Sugg√©rer au moins 2 recettes.\n
          - Retourner un tableau d‚Äôobjets conformes √† l‚Äôinterface \`Recette\`.\n
          üìä **Exemple** üìä\n
          [{
            "id": "rec1",
            "nom": "Soupe de l√©gumes",
            "ingredients": [{ "nom": "Carottes", "quantite": 0.5, "unite": "kg" }],
            "instructions": ["Cuire les l√©gumes", "Mixer"],
            "tempsPreparation": 30,
            "portions": 4,
            "categorie": "plat principal",
            "difficulte": "facile"
          }]\n`,
      });
    },
  },
  {
    id: PromptType.INGREDIENT_BASED_RECIPE,
    name: 'Recette √† Base d‚Äôun Ingr√©dient',
    description: 'G√©n√®re une recette mettant en avant un ingr√©dient principal.',
    generate: (params: { ingredient: Ingredient; member: MembreFamille }) => {
      const { ingredient, member } = params;
      return JSON.stringify({
        prompt: `ü•ï **Recette √† Base d‚Äôun Ingr√©dient** ü•ï\n\n
          G√©n√®re une recette mettant en avant un ingr√©dient principal, adapt√©e √† un membre. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          üåü **Ingr√©dient** üåü\n
          - Nom: ${ingredient.nom}\n
          üë§ **Membre** üë§\n
          - Nom: ${member.prenom} ${member.nom}\n
          - Pr√©f√©rences: ${member.preferencesAlimentaires.join(', ')}\n\n
          üìã **Exemple** üìä\n
          {
            "id": "rec1",
            "nom": "Salade de tomates",
            "ingredients": [{ "nom": "Tomates", "quantite": 2, "unite": "g" }],
            "instructions": ["Couper les tomates", "Assaisonner"],
            "tempsPreparation": 2,
            "portions": 2,
            "categorie": "entr√©e",
            "difficulte": "facile"
          }\n`,
      });
    },
  },
  {
    id: PromptType.BUDGET_MENU,
    name: 'Menu √âconomique',
    description: 'G√©n√®re un menu √† faible co√ªt pour la famille.',
    generate: (params: { members: MembreFamille[]; budget: number }) => {
      const { members, budget } = params;
      return JSON.stringify({
        prompt: `üí∏ **Menu √âconomique** üí∏\n\n
          G√©n√®re un menu √† faible co√ªt (max ${budget} EUR) pour une journ√©e, adapt√© √† la famille. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Menu\`.\n\n
          üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Membres** üë§\n
          ${members.map((m) => `- ${m.prenom} ${m.nom}: ${m.preferencesAlimentaires.join(', ') || 'Aucune'}\n`).join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          {
            id: string;
            date: string;
            typeRepas: 'petit-d√©jeuner' | 'd√©jeuner' | 'd√Æner';
            recettes: [{ id: string; nom: string; ingredients: [] }];
            coutTotalEstime?: number;
            statut: 'planifi√©' | 'termin√©' | 'annul√©';
          }\n\n
          üîß **Instructions** üîß\n
            - Utiliser des ingr√©dients peu co√ªteux.\n
            - Respecter les pr√©f√©rences et restrictions.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Menu\`.\n
          üìã **Exemple** üìä\n
          {
            "id": "menu1",
            "date": "${getCurrentDate()}",
            "typeRepas": "d√©jeuner",
            "recettes": [{ "id": "rec1", "nom": "P√¢tes au pesto", "ingredients": [] }],
            "coutTotalEstime": 10,
            "statut": "planifi√©"
          }\n`,
      });
    },
  },
  {
    id: PromptType.RECIPE_COMPATIBILITY,
    name: 'Analyse de Compatibilit√© d‚Äôune Recette',
    description: 'V√©rifie si une recette est compatible avec les membres de la famille.',
    generate: (params: { recipe: Recette; members: MembreFamille[] }) => {
      const { recipe, members } = params;
      return JSON.stringify({
        prompt: `‚úÖ **Analyse de Compatibilit√© d‚Äôune Recette** ‚úÖ\n\n
          V√©rifie si une recette est compatible avec les pr√©f√©rences et restrictions des membres de la famille. La r√©ponse doit √™tre au format JSON strict.\n\n
          üç¥ **Recette** üç¥\n
          - Nom: ${recipe.nom}\n
          - Ingr√©dients: ${recipe.ingredients.map((i) => i.nom).join(', ')}\n\n
          üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Membres** üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n
          ${members
            .map(
              (m) =>
                `- ${m.prenom} ${m.nom}: ${m.allergies.join(', ') || 'Aucune'}, ${m.preferencesAlimentaires.join(', ') || 'Aucune'}\n`
            )
            .join('\n')}
          \nüìã **Sortie** üìã\n
          {
            "recipeId": string,
            "compatibilite": { [membreId: string]: 'adapt√©' | 'non adapt√©' | 'modifi√©' }
          }\n
          üîß **Instructions** üîß\n
          - Identifier les conflits (allergies, restrictions).\n
          - Sugg√©rer des modifications si n√©cessaire.\n
          - Retourner un objet avec les d√©tails de compatibilit√©.\n
          üìä **Exemple** üìä\n
          {
            "recipeId": "${recipe.id}",
            "compatibilite": { "membre1": "adapt√©", "membre2": "modifi√©" }
          }\n`,
      });
    },
  },
  {
    id: PromptType.SPECIFIC_DIET_RECIPE,
    name: 'Recette pour R√©gime Sp√©cifique',
    description: 'G√©n√®re une recette pour un r√©gime alimentaire sp√©cifique (ex. sans gluten).',
    generate: (params: { member: MembreFamille; diet: string }) => {
      const { member, diet } = params;
      return JSON.stringify({
        prompt: `üå± **Recette pour R√©gime Sp√©cifique** üå±\n\n
          G√©n√®re une recette pour un r√©gime alimentaire sp√©cifique (${diet}), adapt√©e √† un membre. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          üë§ **Membre** üë§\n
          - Nom: ${member.prenom} ${member.nom}\n
          - Pr√©f√©rences: ${member.preferencesAlimentaires.join(', ') || 'Aucune'}\n
          üìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Respecter strictement le r√©gime sp√©cifi√©.\n
          - Inclure des ingr√©dients adapt√©s.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Recette\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "rec1",
            "nom": "Pain sans gluten",
            "ingredients": [{ "nom": "Farine de riz", "quantite": 200, "unite": "g" }],
            "instructions": ["M√©langer la farine", "Cuire 30 min"],
            "tempsPreparation": 15,
            "portions": 4,
            "categorie": "petit-d√©jeuner",
            "difficulte": "moyen"
          }\n`,
      });
    },
  },
  {
    id: PromptType.BALANCED_DAILY_MENU,
    name: 'Menu √âquilibr√© pour la Journ√©e',
    description: 'G√©n√®re un menu √©quilibr√© pour une journ√©e, adapt√© √† un membre.',
    generate: (params: { member: MembreFamille; date: string }) => {
      const { member, date } = params;
      return JSON.stringify({
        prompt: `‚öñÔ∏è **Menu √âquilibr√© pour la Journ√©e** ‚öñÔ∏è\n\n
          G√©n√®re un menu √©quilibr√© pour une journ√©e (${date}), adapt√© aux besoins nutritionnels d‚Äôun membre. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Menu\`.\n\n
          üë§ **Membre** üë§\n
          - Nom: ${member.prenom} ${member.nom}\n
          - Calories cible: ${member.aiPreferences.apportCaloriqueCible ? member.aiPreferences.apportCaloriqueCible : []} kcal\n
          üìã **Interface TypeScript** üìã\n
          interface Menu {
            id: string;
            date: string;
            typeRepas: 'petit-d√©jeuner' | 'd√©jeuner' | 'd√Æner' | 'collation';
            recettes: { id: string; nom: string; ingredients: [{ nom: string; quantite: number; unite: string }] };
            coutTotalEstime?: number;
            statut?: string | 'planifi√©' || 'termin√©' || 'annul√©';
          }\n
          üîß **Instructions** üîß\n
          - Inclure 4 repas √©quilibr√©s.\n
          - Respecter l‚Äôapport calorique cible.\n
          - Retourner un tableau d‚Äôobjets conformes √† l‚Äôinterface \`Menu\`.\n
          üìä **Exemple** üìä\n
          [{
            "id": "menu1",
            "date": "${date}",
            "typeRepas": "petit-d√©jeuner",
            "recettes": [{ "id": "rec1", "nom": "Yaourt aux fruits", "ingredients": [] }],
            "coutTotalEstime": 5,
            "statut": "planifi√©"
          }]\n`,
      });
    },
  },
  {
    id: PromptType.RECIPE_FROM_IMAGE,
    name: 'Recette √† Partir d‚Äôune Photo',
    description: 'G√©n√®re une recette bas√©e sur une photo d‚Äôingr√©dients ou d‚Äôun plat.',
    generate: (params: { imageUri: string; member: MembreFamille }) => {
      const { imageUri, member } = params;
      return JSON.stringify({
        prompt: `üì∏ **Recette √† Partir d‚Äôune Photo** üì∏\n\n
          G√©n√®re une recette bas√©e sur une photo d‚Äôingr√©dients ou d‚Äôun plat, adapt√©e √† un membre. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          üåü **Photo** üåü\n
          - URI: ${imageUri}\n
          üë§ **Membre** üë§\n
          - Nom: ${member.prenom} ${member.nom}\n
          üìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Identifier les ingr√©dients visibles dans la photo.\n
          - Proposer une recette utilisant ces ingr√©dients.\n
          - Respecter les pr√©f√©rences et restrictions du membre.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Recette\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "rec1",
            "nom": "Salade mixte",
            "ingredients": [{ "nom": "Laitue", "quantite": 100, "unite": "g" }],
            "instructions": ["Laver la laitue", "Assaisonner"],
            "tempsPreparation": 10,
            "portions": 2,
            "categorie": "entr√©e",
            "difficulte": "facile"
          }\n`,
      });
    },
  },
  {
    id: PromptType.LEFTOVER_RECIPE,
    name: 'Recette avec Restes',
    description: 'G√©n√®re une recette utilisant des restes alimentaires.',
    generate: (params: { ingredients: Ingredient[] }) => {
      const { ingredients } = params;
      return JSON.stringify({
        prompt: `üç≤ **Recette avec Restes** üç≤\n\n
          G√©n√®re une recette utilisant des restes alimentaires disponibles. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          ü•ï **Restes** üçï\n
          ${ingredients.map((i) => `- ${i.nom}: ${i.quantite} ${i.unite}\n`).join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: string[];
            instructions: [{ nom: string; quantite: number; unite: unit: string }];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' || 'entr√©e' || 'dessert' || 'ap√©ritif' || 'boisson';
            difficulte: 'facile' || 'moyen' || 'difficile';
          }\n
          üìã **Instructions** üîß\n
            - Utiliser uniquement les ressources fournies.\n
            - Proposer une recette cr√©ative.\n
          - Retourner un objet conforme √† l‚Äô√©tat de l‚Äôapplication.\n\n
          üìã **Exercice** üìä\n
          {
            "id": "rec1",
            "nom": "Gratin de restants",
            "ingr√©dients": ["Pommes de pomme", "quantit√©": 2, "unit√©": "g"],
            "instructions": ["Cuir les pommes", "Gratiner"],
            "tempsPr√©paration": 25,
            "portions": 4,
            "cat√©gorie": "plat principal",
            "difficult√©": "moyen"
          }\n`,
      });
    },
  },
  {
    id: PromptType.GUEST_RECIPE,
    name: 'Recette pour Invit√©s',
    description: 'G√©n√®re une recette impressionnante pour des invit√©s.',
    generate: (params: { members: MembreFamille[]; guestCount: number }) => {
      const { members, guestCount } = params;
      return JSON.stringify({
        prompt: `üçΩÔ∏è **Recette pour Invit√©s** üçΩÔ∏è\n\n
          G√©n√®re une recette impressionnante pour ${guestCount} invit√©s, adapt√©e √† la famille. La r√©ponse doit √™tre au format JSON strict, conforme √† l‚Äôinterface TypeScript \`Recette\`.\n\n
          üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Membres** üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n
          ${members.map((m) => `- ${m.prenom} ${m.nom}: ${m.preferencesAlimentaires.join(', ') || 'Aucune'}\n`).join('\n')}
          \nüìã **Interface TypeScript** üìã\n
          interface Recette {
            id: string;
            nom: string;
            ingredients: { nom: string; quantite: number; unite: string }[];
            instructions: string[];
            tempsPreparation: number;
            portions: number;
            categorie: 'plat principal' | 'entr√©e' | 'dessert' | 'ap√©ritif' | 'boisson';
            difficulte: 'facile' | 'moyen' | 'difficile';
          }\n
          üîß **Instructions** üîß\n
          - Cr√©er une recette √©l√©gante et savoureuse.\n
          - Ajuster les portions pour le nombre d‚Äôinvit√©s.\n
          - Retourner un objet conforme √† l‚Äôinterface \`Recette\`.\n
          üìä **Exemple** üìä\n
          {
            "id": "rec1",
            "nom": "Filet mignon en cro√ªte",
            "ingredients": [{ "nom": "Filet mignon", "quantite": 1, "unite": "kg" }],
            "instructions": ["Pr√©parer la p√¢te", "Envelopper la viande"],
            "tempsPreparation": 45,
            "portions": ${guestCount},
            "categorie": "plat principal",
            "difficulte": "moyen"
          }\n`,
      });
    },
  },
  {
    id: PromptType.FOOD_TREND_ANALYSIS,
    name: 'Analyse de Tendances Alimentaires',
    description: 'Analyse les pr√©f√©rences alimentaires de la famille pour identifier des tendances.',
    generate: (params: { members: MembreFamille[] }) => {
      const { members } = params;
      return JSON.stringify({
        prompt: `üìä **Analyse de Tendances Alimentaires** üìä\n\n
          Analyse les pr√©f√©rences alimentaires des membres de la famille pour identifier des tendances et sugg√©rer des am√©liorations. La r√©ponse doit √™tre au format JSON strict.\n\n
          üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Membres** üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n
          ${members
            .map(
              (m) =>
                `- ${m.prenom} ${m.nom}: ${m.preferencesAlimentaires.join(', ') || 'Aucune'}, ${m.aiPreferences.cuisinesPreferees.join(
                  ', '
                ) || 'Aucune'}\n`
            )
            .join('\n')}
          \nüìã **Sortie** üìã\n
          {
            "tendances": string[],
            "suggestions": string[]
          }\n
          üîß **Instructions** üîß\n
          - Identifier les cuisines ou r√©gimes populaires.\n
          - Proposer des recettes ou menus bas√©s sur ces tendances.\n
          - Retourner un objet avec les tendances et suggestions.\n
          üìä **Exemple** üìä\n
          {
            "tendances": ["V√©g√©tarien", "Asiatique"],
            "suggestions": ["Essayer un curry v√©gane", "Ajouter des plats tha√Ø"]
          }\n`,
      });
    },
  },
  {
    id: PromptType.INGREDIENT_AVAILABILITY,
    name: 'V√©rification de Disponibilit√© d‚Äôun Ingr√©dient',
    description: 'V√©rifie la disponibilit√© d‚Äôun ingr√©dient dans les magasins √† proximit√©.',
    generate: (params: { ingredient: string; latitude: number; longitude: number }) => {
      const { ingredient, latitude, longitude } = params;
      return JSON.stringify({
        prompt: `üè¨ **V√©rification de Disponibilit√© d‚Äôun Ingr√©dient** üè¨\n\n
          V√©rifiez la disponibilit√© de "${ingredient}" pr√®s de latitude ${latitude}, longitude ${longitude}. Utilisez l'outil findStoresWithIngredient. R√©pondez avec un message textuel et un tableau de magasins.\n\n
          üìã **Sortie** üìã\n
          {
            "message": string,
            "stores": { name: string; distance: string; inStock: boolean; price?: number; address: string }[]
          }\n
          üîß **Instructions** üîß\n
          - Utiliser l‚Äôoutil findStoresWithIngredient pour obtenir les donn√©es.\n
          - Trier les magasins par distance et disponibilit√©.\n
          - Retourner un objet avec un message et un tableau de magasins.\n
          üìä **Exemple** üìä\n
          {
            "message": "Ingr√©dient trouv√© dans 2 magasins.",
            "stores": [
              { "name": "Supermarch√© X", "distance": "1.2 km", "inStock": true, "price": 2.5, "address": "123 Rue Exemple" }
            ]
          }\n`,
      });
    },
  },
  {
    id: PromptType.NUTRITIONAL_INFO,
    name: 'Informations Nutritionnelles',
    description: 'Fournit des informations nutritionnelles pour un aliment ou une recette.',
    generate: (params: { query: string }) => {
      const { query } = params;
      return JSON.stringify({
        prompt: `üî¨ **Informations Nutritionnelles** üî¨\n\n
          Fournissez des informations nutritionnelles pour "${query}" (calories, prot√©ines, glucides, lipides, fibres). R√©pondez en JSON strict.\n\n
          üìã **Sortie** üìã\n
          {
            "aliment": string,
            "calories": number,
            "nutrients": { name: string; value: number; unit: string }[]
          }\n
          üîß **Instructions** üîß\n
          - Fournir des donn√©es pr√©cises bas√©es sur des standards nutritionnels.\n
          - Retourner un objet avec les d√©tails nutritionnels.\n
          üìä **Exemple** üìä\n
          {
            "aliment": "${query}",
            "calories": 18,
            "nutrients": [
              { "name": "Prot√©ines", "value": 0.9, "unit": "g" },
              { "name": "Glucides", "value": 3.9, "unit": "g" }
            ]
          }\n`,
      });
    },
  },
  {
    id: PromptType.TROUBLESHOOT_PROBLEM,
    name: 'R√©solution de Probl√®me Culinaire',
    description: 'R√©sout un probl√®me culinaire ou domestique.',
    generate: (params: { problem: string }) => {
      const { problem } = params;
      return JSON.stringify({
        prompt: `üõ†Ô∏è **R√©solution de Probl√®me Culinaire** üõ†Ô∏è\n\n
          R√©solvez le probl√®me : "${problem}". Proposez une solution claire avec des √©tapes. R√©pondez en texte.\n\n
          üîß **Instructions** üîß\n
          - Fournir une solution d√©taill√©e et pratique.\n
          - Retourner une cha√Æne de texte avec les √©tapes.\n
          üìä **Exemple** üìä\n
          "1. V√©rifiez la temp√©rature du four.\n2. Ajustez √† 180¬∞C.\n3. Poursuivez la cuisson 10 minutes."\n`,
      });
    },
  },
  {
    id: PromptType.CREATIVE_IDEAS,
    name: 'Id√©es Cr√©atives',
    description: 'G√©n√®re des id√©es cr√©atives pour un contexte donn√©.',
    generate: (params: { context: string }) => {
      const { context } = params;
      return JSON.stringify({
        prompt: `üí° **Id√©es Cr√©atives** üí°\n\n
          G√©n√©rez 5 id√©es cr√©atives pour : "${context}". Pr√©sentez-les sous forme de liste num√©rot√©e. R√©pondez en texte.\n\n
          üîß **Instructions** üîß\n
          - Proposer des id√©es originales et r√©alisables.\n
          - Retourner une cha√Æne de texte avec une liste num√©rot√©e.\n
          üìä **Exemple** üìä\n
          "1. Organiser un d√Æner √† th√®me.\n2. Cr√©er un dessert color√©.\n3. Utiliser des herbes fra√Æches.\n4. Pr√©parer un buffet.\n5. D√©corer avec des fleurs comestibles."\n`,
      });
    },
  },
];
